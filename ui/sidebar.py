import streamlit as st
import time
from core.services import course_manager_service, document_processor_service, ai_service, slugify

def display_sidebar():
    """V·∫Ω sidebar ch·ª©a c√°c c√¥ng c·ª• AI v√† qu·∫£n l√Ω t√†i li·ªáu cho Workspace."""
    with st.sidebar:
        # --- Logo ---
        st.markdown(
            """
            <div class="logo-box">
                <span class="logo-text">P</span>
            </div>
            """,
            unsafe_allow_html=True
        )
        st.title(f"PNote Workspace")
        st.caption(f"Kh√≥a h·ªçc: **{st.session_state.get('current_course_name', '')}**")
        st.markdown("---")

        # --- Th√™m t√†i li·ªáu ---
        with st.expander("‚ûï Th√™m t√†i li·ªáu v√†o kh√≥a h·ªçc"):
            uploaded_files = st.file_uploader("1. T·∫£i file (PDF, DOCX)", type=["pdf", "docx"], accept_multiple_files=True)
            url_input = st.text_input("2. Nh·∫≠p URL (b√†i b√°o, YouTube)", placeholder="https://...")
            pasted_text = st.text_area("3. D√°n vƒÉn b·∫£n v√†o ƒë√¢y", placeholder="D√°n n·ªôi dung t·ª´ clipboard...")
            
            if st.button("X·ª≠ l√Ω v√† Th√™m", use_container_width=True):
                with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                    processed_count = 0
                    sources = []
                    if uploaded_files: sources.extend([('pdf' if f.name.endswith('.pdf') else 'docx', f) for f in uploaded_files])
                    if url_input: sources.append(('url', url_input))
                    if pasted_text: sources.append(('text', pasted_text))
                    
                    if not sources:
                        st.warning("Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ x·ª≠ l√Ω.")
                    else:
                        for source_type, source_data in sources:
                            text, source_name = document_processor_service.extract_text(source_type, source_data)
                            if text:
                                course_manager_service.add_document(st.session_state.current_course_id, text, source_name)
                                processed_count += 1
                        st.success(f"Ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω {processed_count} ngu·ªìn t√†i li·ªáu.")
                        st.info("H·ªá th·ªëng s·∫Ω m·∫•t v√†i gi√¢y ƒë·ªÉ c·∫≠p nh·∫≠t. Vui l√≤ng b·∫Øt ƒë·∫ßu chat.")
                        time.sleep(1)
        
        # --- C√¥ng c·ª• AI ---
        st.markdown("---")
        st.header("üõ†Ô∏è AI Toolkit", anchor=False)
        
        with st.expander("üìÑ T√≥m t·∫Øt Kh√≥a h·ªçc"):
            if st.button("T·∫°o T√≥m T·∫Øt", use_container_width=True, key="summarize_btn"):
                with st.spinner("AI ƒëang ƒë·ªçc v√† t√≥m t·∫Øt to√†n b·ªô t√†i li·ªáu..."):
                    summary = ai_service.summarize_course(st.session_state.current_course_id)
                    st.session_state.summary = summary
            if "summary" in st.session_state and st.session_state.summary:
                st.text_area("B·∫£n t√≥m t·∫Øt:", value=st.session_state.summary, height=200)

        with st.expander("‚ùì T·∫°o C√¢u H·ªèi √în T·∫≠p"):
            num_questions = st.slider("S·ªë l∆∞·ª£ng c√¢u h·ªèi:", 3, 10, 5)
            if st.button("B·∫Øt ƒë·∫ßu T·∫°o Quiz", use_container_width=True, key="quiz_btn"):
                 with st.spinner("AI ƒëang so·∫°n c√¢u h·ªèi cho b·∫°n..."):
                    quiz = ai_service.generate_quiz(st.session_state.current_course_id, num_questions)
                    st.session_state.quiz = quiz
            if "quiz" in st.session_state and isinstance(st.session_state.quiz, list):
                for i, q in enumerate(st.session_state.quiz):
                    st.write(f"**C√¢u {i+1}:** {q['question']}")
                    st.radio("Ch·ªçn ƒë√°p √°n:", options=q['options'], key=f"q_{i}")

        with st.expander("üîë Tr√≠ch Xu·∫•t T·ª´ Kh√≥a"):
            if st.button("T√¨m T·ª´ Kh√≥a Ch√≠nh", use_container_width=True, key="keyword_btn"):
                with st.spinner("AI ƒëang ph√¢n t√≠ch c√°c kh√°i ni·ªám..."):
                    keywords = ai_service.extract_keywords(st.session_state.current_course_id)
                    st.session_state.keywords = keywords
            if "keywords" in st.session_state and st.session_state.keywords:
                st.info(", ".join(st.session_state.keywords))

        # --- T√πy ch·ªçn N√¢ng cao ---
        st.markdown("---")
        with st.expander("‚ö†Ô∏è T√πy ch·ªçn N√¢ng cao"):
            st.warning("H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")
            if st.button("X√≥a Kh√≥a H·ªçc N√†y", use_container_width=True, type="primary"):
                course_to_delete_id = st.session_state.current_course_id
                course_to_delete_name = st.session_state.current_course_name
                with st.spinner(f"ƒêang x√≥a kh√≥a h·ªçc '{course_to_delete_name}'..."):
                    success, message = course_manager_service.delete_course(course_to_delete_id)
                    if success:
                        st.session_state.courses = [c for c in st.session_state.courses if c['id'] != course_to_delete_id]
                        st.success(message)
                        time.sleep(1); st.switch_page("app.py")
                    else:
                        st.error(message)

        # --- N√∫t ƒëi·ªÅu h∆∞·ªõng ---
        st.markdown("---")
        if st.button("‚¨ÖÔ∏è Tr·ªü v·ªÅ Dashboard", use_container_width=True):
            st.switch_page("app.py")